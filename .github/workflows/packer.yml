name: Azure - Packer Build

on:
    workflow_dispatch:
    schedule:
      - cron: '41 4 * * 0' # runs every sunday at 4:41 am (UTC)
 
env:

  ## Azure image (Visual Studio) 
  #IMAGE_PUBLISHER: microsoftvisualstudio
  #IMAGE_OFFER: visualstudioplustools
  #IMAGE_SKU: vs-2022-pro-general-win11-m365-gen2
  
  ## Azure image (Visual Studio Code) 
  IMAGE_PUBLISHER: microsoftvisualstudio
  IMAGE_OFFER: windowsplustools
  IMAGE_SKU: base-win11-gen2

  ## 
  PRODUCT_VERSION: latest

jobs:
  latest_windows_version:
    name: Get latest Windows version from Azure
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_latest_version.outputs.version }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PACKER_AZURE_CREDENTIALS }}

      - name: Get Latest Version
        id: get_latest_version
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az account show --query user.name --output table
            latest_version=$(
              az vm image show \
                --urn "${IMAGE_PUBLISHER}:${IMAGE_OFFER}:${IMAGE_SKU}:latest" \
                --query name \
                --out tsv
            ) >> $GITHUB_OUTPUT

            echo "Version:   ${latest_version}"  >> $GITHUB_OUTPUT
            echo "Publisher: ${IMAGE_PUBLISHER}" >> $GITHUB_OUTPUT
            echo "Offer:     ${IMAGE_OFFER}"     >> $GITHUB_OUTPUT
            echo "SKU:       ${IMAGE_SKU}"       >> $GITHUB_OUTPUT    
            echo "Version:   ${latest_version}"  >> $GITHUB_OUTPUT

            echo "::set-output name=version::${latest_version}" >> $GITHUB_OUTPUT

  check_image_exists:
    name: Check if latest version has already been built
    runs-on: ubuntu-latest
    needs: latest_windows_version
    outputs:
      exists: ${{ steps.get_image.outputs.exists }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PACKER_AZURE_CREDENTIALS }}

      - name: Check If Image Exists
        id: get_image
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            if az image show \
              --resource-group "${{ secrets.PACKER_ARTIFACTS_RESOURCE_GROUP }}" \
              --name "${IMAGE_SKU}-${{ needs.latest_windows_version.outputs.version }}"; then
              image_exists=true
            else
              image_exists=false
            fi

            echo "Image Exists: ${image_exists}"  >> $GITHUB_OUTPUT
            echo "exists=${image_exists}"         >> $GITHUB_OUTPUT

  packer:
    name: Run Packer
    runs-on: ubuntu-latest
    needs: [latest_windows_version, check_image_exists]
    if: needs.check_image_exists.outputs.exists == 'false'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only -chdir=./packer

      - name: Build Packer Image
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: -color=false -on-error=abort -chdir=./packer
        env:
          PKR_VAR_client_id: ${{ secrets.PACKER_CLIENT_ID }}
          PKR_VAR_client_secret: ${{ secrets.PACKER_CLIENT_SECRET }}
          PKR_VAR_subscription_id: ${{ secrets.PACKER_SUBSCRIPTION_ID }}
          PKR_VAR_tenant_id: ${{ secrets.PACKER_TENANT_ID }}
          PKR_VAR_artifacts_resource_group: ${{ secrets.PACKER_ARTIFACTS_RESOURCE_GROUP }}
          PKR_VAR_build_resource_group: ${{ secrets.PACKER_BUILD_RESOURCE_GROUP }}
          PKR_VAR_source_image_publisher: ${{ env.IMAGE_PUBLISHER }}
          PKR_VAR_source_image_offer: ${{ env.IMAGE_OFFER }}
          PKR_VAR_source_image_sku: ${{ env.IMAGE_SKU }}
          PKR_VAR_source_image_version: ${{ needs.latest_windows_version.outputs.version }}
          PKR_VAR_build_gallery_name: ${{ secrets.PACKER_BUILD_GALLERY_NAME }}
          PKR_VAR_build_gallery_image_name: ${{ secrets.PACKER_BUILD_GALLERY_IMAGE_NAME }}
  cleanup:
    name: Cleanup Packer Resources
    runs-on: ubuntu-latest
    needs: packer
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PACKER_AZURE_CREDENTIALS }}

      - name: Cleanup Resource Group
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az deployment group create \
              --mode Complete \
              --resource-group "${{ secrets.PACKER_BUILD_RESOURCE_GROUP }}" \
              --template-file cleanup-resource-group.bicep
